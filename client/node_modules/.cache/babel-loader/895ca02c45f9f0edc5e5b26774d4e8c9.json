{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../util/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\"; //Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"/api/users/register\", userData).then(res => history.push(\"/login\")).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; //Login\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    const {\n      token\n    } = res.data; // Set token to localStorage\n\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token);\n    const decoded = jwt_decode(token);\n    console.log(decoded); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded_data => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded_data\n  };\n}; // Logout user\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/crehan/Code/BTechProject2022/Registration-and-Login-using-MERN-stack/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","console","log","setCurrentUser","decoded_data","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,SAA7C,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DR,EAAAA,KAAK,CAACS,IAAN,CAAW,qBAAX,EAAiCH,QAAjC,EACCI,IADD,CACMC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CADb,EAECC,KAFD,CAEOC,GAAG,IAAGN,QAAQ,CAAC;AACpBO,IAAAA,IAAI,EAACZ,UADe;AAEpBa,IAAAA,OAAO,EAACF,GAAG,CAACG,QAAJ,CAAaC;AAFD,GAAD,CAFrB;AAMD,CAPM,C,CASP;;AACA,OAAO,MAAMC,SAAS,GAAIb,QAAD,IAAcE,QAAQ,IAAI;AACjDR,EAAAA,KAAK,CAACS,IAAN,CAAW,kBAAX,EAA8BH,QAA9B,EACCI,IADD,CACOC,GAAG,IAAI;AACV,UAAM;AAACS,MAAAA;AAAD,QAAUT,GAAG,CAACO,IAApB,CADU,CAEV;;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAHU,CAIV;;AACAnB,IAAAA,YAAY,CAACmB,KAAD,CAAZ;AACA,UAAMG,OAAO,GAAGrB,UAAU,CAACkB,KAAD,CAA1B;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EAPU,CAQV;;AACAf,IAAAA,QAAQ,CAACkB,cAAc,CAACH,OAAD,CAAf,CAAR;AACF,GAXF,EAaCV,KAbD,CAaOC,GAAG,IAAGN,QAAQ,CAAC;AACpBO,IAAAA,IAAI,EAACZ,UADe;AAEpBa,IAAAA,OAAO,EAACF,GAAG,CAACG,QAAJ,CAAaC;AAFD,GAAD,CAbrB;AAiBD,CAlBM,C,CAqBP;;AACA,OAAO,MAAMQ,cAAc,GAAGC,YAAY,IAAI;AAC5C,SAAO;AACLZ,IAAAA,IAAI,EAAEX,gBADD;AAELY,IAAAA,OAAO,EAAEW;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAMpB,QAAQ,IAAI;AAC1C;AACAa,EAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACA5B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAO,EAAAA,QAAQ,CAACkB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../util/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\n\n//Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"/api/users/register\",userData)\n  .then(res => history.push(\"/login\"))\n  .catch(err=> dispatch({\n    type:GET_ERRORS,\n    payload:err.response.data\n  }))\n}\n\n//Login\nexport const loginUser = (userData) => dispatch => {\n  axios.post(\"/api/users/login\",userData)\n  .then( res => {\n      const {token} = res.data;\n      // Set token to localStorage\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      const decoded = jwt_decode(token);\n      console.log(decoded);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n   }\n  )\n  .catch(err=> dispatch({\n    type:GET_ERRORS,\n    payload:err.response.data\n  }))\n}\n\n\n// Set logged in user\nexport const setCurrentUser = decoded_data => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded_data\n  };\n};\n \n// Logout user\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n  "]},"metadata":{},"sourceType":"module"}